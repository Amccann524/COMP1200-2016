|=====================|
|Number Representation|
|=====================|

1. 1590 to binary - 1100011011
2. 0b101110110 to decimal - 374
3. 0b1100 0000 0001 1010 0001 0101 1011 1010 1101 to hexadecimal - C01A15BAD
4. 0b100 001 101 101 to octal - 4155
5. 0o31337 to binary - 011 001 011 011 111
6. 0xBADF00D to binary and then to octal - 0b1011 1010 1101 1111 0000 0000 1101 -> 1353370015
7. 0o6157 to binary and then to decimal - 0b110 001 101 111 -> 3183
8. 497 to binary. Then, use twoâ€™s complement to convert 497 to -497 in binary - 0b0111110001 -> 0b1000001111
9. 900.79 to binary up to the 1/16ths spot - 0b1110000100.11001
10. Count from 0 through 10 in ternary (base 3) -
      1
      2
      10
      11
      12
      20
      21
      22
      100
      101

|==============|
|Circuit Design|
|==============|

1.
   ___________________________________
  | A-1 A-0 | B-1 B-0 | A1 A0 <= B1 B0|
  |-----------------------------------|
  |  0   0  |  0   0  |       1       |
  |  0   0  |  0   1  |       1       |
  |  0   0  |  1   0  |       1       |
  |  0   0  |  1   1  |       1       |
  |-----------------------------------|
  |  0   1  |  0   0  |       0       |
  |  0   1  |  0   1  |       1       |
  |  0   1  |  1   0  |       1       |
  |  0   1  |  1   1  |       1       |
  |-----------------------------------|
  |  1   0  |  0   0  |       0       |
  |  1   0  |  0   1  |       0       |
  |  1   0  |  1   0  |       1       |
  |  1   0  |  1   1  |       1       |
  |-----------------------------------|
  |  1   1  |  0   0  |       0       |
  |  1   1  |  0   1  |       0       |
  |  1   1  |  1   0  |       0       |
  |  1   1  |  1   1  |       1       |
  |___________________________________|


  2. A




|===============|
|Boolean Algebra|
|===============|

-[PNAO]-

1. c + (b * c)' = 1
  if c is 1 and b is 0
  or c is 1 and b is 1
  or c is 0 and b is 1


2. (a + c) * (a * d + a * d') + a * c + c = a + c

    (a + c) <- is True for a is 1 or c is 1 or both.
    (a * d + a * d') <- is always 1 if a is 0 or 1.
    + a * c + c <- (this part does not really matter since the statement before it is always 1)
    so as long as a or c has a 1
